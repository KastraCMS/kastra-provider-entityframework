// <auto-generated />
using System;
using Kastra.DAL.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kastra.DAL.EntityFramework.Migrations
{
    [DbContext(typeof(KastraDbContext))]
    [Migration("20210508220529_Initial_Kastra_2.0.0")]
    partial class Initial_Kastra_200
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kastra.Core.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Kastra.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.File", b =>
                {
                    b.Property<Guid>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FileID");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Path")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("FileId")
                        .HasName("PK_Kastra_Files");

                    b.ToTable("Kastra_Files");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.MailTemplate", b =>
                {
                    b.Property<int>("MailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Keyname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("MailTemplateId")
                        .HasName("PK_Kastra_Mail_Templates");

                    b.ToTable("Kastra_Mail_Templates");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit")
                        .HasColumnName("IsDisabled");

                    b.Property<int>("ModuleDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleDefID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PageId")
                        .HasColumnType("int")
                        .HasColumnName("PageID");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int")
                        .HasColumnName("PlaceID");

                    b.HasKey("ModuleId")
                        .HasName("PK_Kastra_Modules");

                    b.HasIndex("ModuleDefinitionId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Kastra_Modules");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleControl", b =>
                {
                    b.Property<int>("ModuleControlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleControlID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("ModuleDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleDefID");

                    b.Property<string>("Path")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ModuleControlId")
                        .HasName("PK_Kastra_Module_Controls");

                    b.HasIndex("ModuleDefinitionId");

                    b.ToTable("Kastra_Module_Controls");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleDefinition", b =>
                {
                    b.Property<int>("ModuleDefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleDefID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Namespace")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ModuleDefId")
                        .HasName("PK_Kastra_Module_Definitions");

                    b.ToTable("Kastra_Module_Definitions");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleNavigation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModuleNavigationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleDefinitionId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleDefinitionID");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id")
                        .HasName("PK_Kastra_Module_Navigations");

                    b.HasIndex("ModuleDefinitionId");

                    b.ToTable("Kastra_Module_Navigations");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModulePermission", b =>
                {
                    b.Property<int>("ModulePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ModulePermissionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("ModuleID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.HasKey("ModulePermissionId")
                        .HasName("PK_Kastra_Module_Permissions");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PermissionId");

                    b.ToTable("Kastra_Module_Permissions");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MetaRobot")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PageTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("PageTemplateID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PageId")
                        .HasName("PK_Kastra_Pages");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("Kastra_Pages");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.PageTemplate", b =>
                {
                    b.Property<int>("PageTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PageTemplateID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModelClass")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ViewPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("PageTemplateId")
                        .HasName("PK_Kastra_Page_Templates");

                    b.ToTable("Kastra_Page_Templates");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Parameter", b =>
                {
                    b.Property<int>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("ParameterId")
                        .HasName("PK_Kastra_Parameters");

                    b.ToTable("Kastra_Parameters");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PermissionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PermissionId")
                        .HasName("PK_Kastra_Permissions");

                    b.ToTable("Kastra_Permissions");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlaceID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("PageTemplateId")
                        .HasColumnType("int")
                        .HasColumnName("PageTemplateID");

                    b.HasKey("PlaceId")
                        .HasName("PK_Kastra_Places");

                    b.HasIndex("ModuleId")
                        .IsUnique()
                        .HasFilter("[ModuleId] IS NOT NULL");

                    b.HasIndex("PageTemplateId");

                    b.ToTable("Kastra_Places");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Visitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasColumnName("IpAddress");

                    b.Property<DateTime>("LastVisitAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastVisitAt");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("UserAgent");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id")
                        .HasName("PK_Kastra_Visitors");

                    b.HasIndex("UserId");

                    b.ToTable("Kastra_Visitors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Module", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.ModuleDefinition", "ModuleDefinition")
                        .WithMany("Modules")
                        .HasForeignKey("ModuleDefinitionId")
                        .HasConstraintName("FK_Kastra_Modules_Kastra_Module_Definitions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kastra.DAL.EntityFramework.Models.Place", "Place")
                        .WithMany("KastraModules")
                        .HasForeignKey("PlaceId")
                        .HasConstraintName("FK_Kastra_Modules_Kastra_Places")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleDefinition");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleControl", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.ModuleDefinition", "ModuleDefinition")
                        .WithMany("ModuleControls")
                        .HasForeignKey("ModuleDefinitionId")
                        .HasConstraintName("FK_Kastra_Module_Controls_Kastra_Modules")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleDefinition");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleNavigation", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.ModuleDefinition", "ModuleDefinition")
                        .WithMany("ModuleNavigations")
                        .HasForeignKey("ModuleDefinitionId")
                        .HasConstraintName("FK_Kastra_Module_Navigations_Kastra_Module!Definitions")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ModuleDefinition");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModulePermission", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.Module", "Module")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("ModuleId")
                        .HasConstraintName("FK_Kastra_Module_Permissions_Kastra_Modules")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kastra.DAL.EntityFramework.Models.Permission", "Permission")
                        .WithMany("KastraModulePermissions")
                        .HasForeignKey("PermissionId")
                        .HasConstraintName("FK_Kastra_Module_Permissions_Kastra_Module_Permissions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Page", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.PageTemplate", "PageTemplate")
                        .WithMany("KastraPages")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_Kastra_Pages_Kastra_Page_Templates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PageTemplate");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Place", b =>
                {
                    b.HasOne("Kastra.DAL.EntityFramework.Models.Module", "StaticKastraModule")
                        .WithOne("StaticPlace")
                        .HasForeignKey("Kastra.DAL.EntityFramework.Models.Place", "ModuleId");

                    b.HasOne("Kastra.DAL.EntityFramework.Models.PageTemplate", "PageTemplate")
                        .WithMany("KastraPlaces")
                        .HasForeignKey("PageTemplateId")
                        .HasConstraintName("FK_Kastra_Places_Kastra_Page_Templates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PageTemplate");

                    b.Navigation("StaticKastraModule");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Visitor", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kastra.Core.Identity.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Kastra.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kastra.Core.Identity.ApplicationRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Kastra.Core.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Module", b =>
                {
                    b.Navigation("ModulePermissions");

                    b.Navigation("StaticPlace");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.ModuleDefinition", b =>
                {
                    b.Navigation("ModuleControls");

                    b.Navigation("ModuleNavigations");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.PageTemplate", b =>
                {
                    b.Navigation("KastraPages");

                    b.Navigation("KastraPlaces");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Permission", b =>
                {
                    b.Navigation("KastraModulePermissions");
                });

            modelBuilder.Entity("Kastra.DAL.EntityFramework.Models.Place", b =>
                {
                    b.Navigation("KastraModules");
                });
#pragma warning restore 612, 618
        }
    }
}
